##高级数据类型
列表：
	定义列表：list_name=[]
	添加：
		list_name.insert(索引,数据) #指定位置插入
		list_name.append(数据) #尾部插入
		list_name.extend(列表2) #将列表2数据追加到列表后面
	修改:
		list_name[索引]=数据 #修改指定索引数据
	删除：
		del list_name[索引] #删除指定索引数据
		del list_name #删除列表变量
		list_name.remove(数据) #删除第一个出现指定数据
		list_name.pop() #删除列表最后一个元素
		list_name.pop(索引) #删除指定索引的数据
		list_name.clear() #清空列表
	统计：
		len(list_name) #统计列表长度
		list_name.count(数据) #统计指定数据的出现次数
	排序：
		list_name.sort() #升序
		list_name.sort(reverse=Ture) #降序
		list_name.reverse() #反转
元组：
	元组与列表相似，但是不能修改
	info_tuple=() #创建空元组
	info_tuple=('apple',) #一个元素需要在后面加","
	info.index('apple') #获取数据的索引
	info_tuple.count('apple') #统计数据的个数
	list(元组) #元组转列表
	tuple(列表) #列表转元组
字典：
	用{}定义字段，字典使用键值对形式存储数据，键值对之间使用","分割
	键值之间使用":"分隔，值可以是任何类型，但是键只能是字符串，数字，元组
	len(字典) #获取字典的键值对数
	字典.keys() #获取字典的key列表
	字典.values() #获取字典的value列表
	字典.items() #获取字典的(key,values)元组列表
	字典[key] #从字典里面取数，不存在会报错
	字典.get(key) #从字典里面取数，不存在不会报错
	del 字典.[key] #删除指定键值对，key不存在会报错
	字典.pop(key) #删除指定键值对，key不存在会报错
	字典.popitem() #随机删除一个键值对
	字典.clear() #清空字典
	字典[key]=value #存在key就修改，不存在就添加键值对
	字典.setdefault(key,value) #key存在，不会修改，不存在就添加键值对
	字典.update(字典2) #将字典2的数据合并到字典1中去
字符串：
	1.创建字符串：
		s='hello'
		s="Hello"
		S="""hello
		world
		"""
	2.字符串拼接&重复：
		s="hello" + " " + "world" #拼接后 hello world
		s="Hi"*3 #HiHiHi
	3.字符串格式化：
			name="Alice"
			age=25
			print(f"{name} is {age} years old.") #f-string常用
			print("{} is {} years old.".format(name,age)) #format 方法
			print("%s is %s years old.",%(name,age)) #%格式
	4.字符串切片：
		s="abcdefg"
		print(s[0]) #a
		print(s[-1]) #g
		print(s[2:5]) #cde,前闭后开
		print(s[:3]) #abc
		print(::2) #aceg,步长为2
		s = "abcdef"
		print(s[::-1])   # fedcba
	5.字符串判断和查找：
		s="hello world!!"
		print("world" in s) #True
		print(s.starswith("he")) #True,s是否以he卡头
		print(s.endswith("ld")) #True,s是否以ld结尾
		print(s.find("lo")) #3,(找不到返回-1)
		print(s.index('lo')) #3,找不到抛异常
	6.修改字符串
		s = "  Hello, World!  "
		print(s.lower()) #全小写
		print(s.upper()) #全大写
		print(s.strip()) #去两边空格
		print(s.replace("World","Python")) #替换	
		print(s.split(",")) #以","为分隔符，生成列表
		print("-".join(["a","b","c"])) #合并列表为字符串
	7.字符类型判断：
		s = "123"
		print(s.isdigit())       # True，是否全为数字
		print("abc".isalpha())   # True，是否全为字母
		print("abc123".isalnum())# True，是否字母或数字
		print("   ".isspace())   # True，是否空白字符
set集合：
	1.创建一个set，需要提供一个list列表：set1=set([123,456,789])
	2.添加元素：set1.add(100) #{456, 123, 100, 789} #集合元素不重复
	3.删除元素：set.remove(100)
	4.set1=set('hello') #{'h', 'l', 'e', 'o'}
	5.set2=set(['p','y','y','h','o','n']) #{'h', 'n', 'o', 'y', 'p'}
	6.set1&set2 #{'h','o'} 
	7.set1 | set2  # {'h', 'p', 'n', 'e', 'o', 'y', 'l'}并集
	8.set1-set2 #{'l','e'} #差集
	9.列表可以使用hash去除重复元素，但是效率没有set高
函数：
	函数参数：
		1.类型：默认参数,关键字参数,不定长参数
		2.默认参数：def func(name,age,sex='男')
			func("李四",18): #默认参数，不传值就用默认参数，要写后面，要按顺序来
		3.关键字参数：def func(name,age,sex='男')
			func(name = '李四' ,sex = '女', age = 18) #可以不按顺序来
		4.不定长参数：
			*args: def func(*args):
				fun(1,2,3):会把传过去的参数转为元组：(1,2,3)
			**kwargs: def func(**kwargs):
				func(a=1,b=2):#把参数转为一个字典：{"a":'1',"b":"2"},for k, v in kwargs.items()可以遍历字典
		5.只接受关键字传参：
			def func(name,*,age,sex='男') #age和sex只接受关键字传参
	函数传参问题：
		这里可以解释python中数据类型为什么分可变和不可变
		不可变有：整数、字符串、元组，与C++中的值传递相似，只是把对象的值传过去了，没有传对象的地址
		可变有：字典、列表,与C++中的引用相似，这个字典或者列表名就是对象的地址，所以可以修改	
	lambda匿名函数：
		num2 = 100
		sum1 = lambda num1 : num1 + num2 ;
		
		num2 = 10000
		sum2 = lambda num1 : num1 + num2 ;
		
		print( sum1( 1 ) )
		print( sum2( 1 ) )
		#为什么生成10001 10001呢？
		#因为会生成一个匿名函数表，sum1 = lambda num1: num1 + num2 时，num2 没有立即绑定值，而是记住了用的时候查 num2
		#其实本质的原因是匿名函数其实也是一个函数，函数只有被调用的时候才会执行，而num2是一个全局变量，肯定是使用最新的值
		这个匿名函数本质如下：
		num2 = 100
		def fun1(num1):
			return num1 + num2
		
		num2 = 1000
		def fun2(num1):
			return num1 + num2
		
		print(fun1( 1 ))
		print(fun2( 1 ))
迭代器和生成器：
	迭代器的两个基本方法：iter()、next(),字符串、元组、列表都可以创建迭代器对象
	创建迭代器：
		# tuple(元祖) 对象创建迭代器
		tuple1 = ( 1,2,3,4 )
		iter3 = iter ( tuple1 )
	遍历迭代器对象：
		#for遍历
		for x in iter3:
			print(x)
		#next遍历
		while True:
		try:
			print(next(iter3),end=' ')
		except StopIteration:
			break
	list生成式：
		list1=list(rang(1,31)) #生成1到30的列表
		list1=[x*x for x in range(1,11)] #生成1到10的平方根列表
		list1=[x*x for x in range(1,11) if x%2==0] #生成1到10，偶数的平方根
		list1=[(x+1,y+1) for x in range(3) for y in range (5)]
	生成器
		使用场景：列表元素可以通过算法得出，不用分配空间，可以节约内存
		Python中使用了yield的函数被称为生成器，只用使用for..in..或者next()才会被调用
		跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。
		在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值。并在下一次执行 next()方法时从当前位置继续运行。
		生成器的创建：把列表生成式的[]换成()
		gen= (x * x for x in range(10))
		print(gen)
		计算斐波拉契数列的生成器：
			def fibon(n):
				for i in range(n):
					yield a
					a, b = b, a + b
			
			# 引用函数
			for x in fibon(1000000):
				print(x , end = ' ')
		zip():同时迭代多个序列
			names = ['laingdianshui', 'twowater', '两点水']
			ages = [18, 19, 20]
			for name, age in zip(names, ages): #以最短的为标准结束
				print(name,age)
			dict1= dict(zip(names,ages)) #生成字典
			
	装饰器：
		本质：函数的函数
		def decorator(func):
			def punch():
				print("装饰中...")
				func()
			return punch  # 这一步关键！这里行是装饰调用器里面的函数
		
		def hello():
			print("Hello")
		
		f = decorator(hello)
		f()  # 输出：装饰中... \n Hello

闭包：
	def make_counter():
		count = 0  # 外部函数的局部变量
		def counter():
			nonlocal count  # 声明我们要修改外部变量
			count += 1
			return count
		return counter
	
	c1 = make_counter()
	print(c1())  # 输出 1
	print(c1())  # 输出 2
	print(c1())  # 输出 3
	
	c2 = make_counter()
	print(c2())  # 输出 1（新的闭包，不影响 c1）
	#当这个闭包函数不再被引用时，它内部保存的变量也会一起被释放。
		
线程与进程：
	